// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	core.proto

It has these top-level messages:
	Empty
	Pod
	Pods
	Network
	Networks
	Node
	Nodes
	NodeAvailable
	Container
	Containers
	ContainerID
	ContainerIDs
	RemoveContainerOptions
	ReallocOptions
	AddPodOptions
	RemovePodOptions
	GetPodOptions
	AddNodeOptions
	RemoveNodeOptions
	GetNodeOptions
	ListNodesOptions
	Build
	Builds
	BuildImageOptions
	HookOptions
	HealthCheckOptions
	EntrypointOptions
	DeployOptions
	RemoveImageOptions
	BackupOptions
	ErrorDetail
	BuildImageMessage
	CreateContainerMessage
	RunAndWaitMessage
	RemoveImageMessage
	RemoveContainerMessage
	ReallocResourceMessage
	BackupMessage
	RunAndWaitOptions
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 对的, protobuf 就是这样...
type Pod struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
}

func (m *Pod) Reset()                    { *m = Pod{} }
func (m *Pod) String() string            { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()               {}
func (*Pod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Pod) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pod) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type Pods struct {
	Pods []*Pod `protobuf:"bytes,1,rep,name=pods" json:"pods,omitempty"`
}

func (m *Pods) Reset()                    { *m = Pods{} }
func (m *Pods) String() string            { return proto.CompactTextString(m) }
func (*Pods) ProtoMessage()               {}
func (*Pods) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Pods) GetPods() []*Pod {
	if m != nil {
		return m.Pods
	}
	return nil
}

type Network struct {
	Name    string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Subnets []string `protobuf:"bytes,2,rep,name=subnets" json:"subnets,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Network) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Network) GetSubnets() []string {
	if m != nil {
		return m.Subnets
	}
	return nil
}

type Networks struct {
	Networks []*Network `protobuf:"bytes,1,rep,name=networks" json:"networks,omitempty"`
}

func (m *Networks) Reset()                    { *m = Networks{} }
func (m *Networks) String() string            { return proto.CompactTextString(m) }
func (*Networks) ProtoMessage()               {}
func (*Networks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Networks) GetNetworks() []*Network {
	if m != nil {
		return m.Networks
	}
	return nil
}

type Node struct {
	Name      string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Endpoint  string           `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	Podname   string           `protobuf:"bytes,3,opt,name=podname" json:"podname,omitempty"`
	Public    bool             `protobuf:"varint,4,opt,name=public" json:"public,omitempty"`
	Cpu       map[string]int64 `protobuf:"bytes,5,rep,name=cpu" json:"cpu,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Info      string           `protobuf:"bytes,6,opt,name=info" json:"info,omitempty"`
	Available bool             `protobuf:"varint,7,opt,name=available" json:"available,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Node) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *Node) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *Node) GetCpu() map[string]int64 {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Node) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Node) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

type Nodes struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *Nodes) Reset()                    { *m = Nodes{} }
func (m *Nodes) String() string            { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()               {}
func (*Nodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Nodes) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeAvailable struct {
	Nodename  string `protobuf:"bytes,1,opt,name=nodename" json:"nodename,omitempty"`
	Podname   string `protobuf:"bytes,2,opt,name=podname" json:"podname,omitempty"`
	Available bool   `protobuf:"varint,3,opt,name=available" json:"available,omitempty"`
}

func (m *NodeAvailable) Reset()                    { *m = NodeAvailable{} }
func (m *NodeAvailable) String() string            { return proto.CompactTextString(m) }
func (*NodeAvailable) ProtoMessage()               {}
func (*NodeAvailable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NodeAvailable) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *NodeAvailable) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *NodeAvailable) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

type Container struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Podname  string `protobuf:"bytes,2,opt,name=podname" json:"podname,omitempty"`
	Nodename string `protobuf:"bytes,3,opt,name=nodename" json:"nodename,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Info     string `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Container) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Container) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *Container) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Container) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type Containers struct {
	Containers []*Container `protobuf:"bytes,1,rep,name=containers" json:"containers,omitempty"`
}

func (m *Containers) Reset()                    { *m = Containers{} }
func (m *Containers) String() string            { return proto.CompactTextString(m) }
func (*Containers) ProtoMessage()               {}
func (*Containers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Containers) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

type ContainerID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ContainerID) Reset()                    { *m = ContainerID{} }
func (m *ContainerID) String() string            { return proto.CompactTextString(m) }
func (*ContainerID) ProtoMessage()               {}
func (*ContainerID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ContainerID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ContainerIDs struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *ContainerIDs) Reset()                    { *m = ContainerIDs{} }
func (m *ContainerIDs) String() string            { return proto.CompactTextString(m) }
func (*ContainerIDs) ProtoMessage()               {}
func (*ContainerIDs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ContainerIDs) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type RemoveContainerOptions struct {
	Ids   []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Force bool     `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
}

func (m *RemoveContainerOptions) Reset()                    { *m = RemoveContainerOptions{} }
func (m *RemoveContainerOptions) String() string            { return proto.CompactTextString(m) }
func (*RemoveContainerOptions) ProtoMessage()               {}
func (*RemoveContainerOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RemoveContainerOptions) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *RemoveContainerOptions) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type ReallocOptions struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Cpu float64  `protobuf:"fixed64,2,opt,name=cpu" json:"cpu,omitempty"`
	Mem int64    `protobuf:"varint,3,opt,name=mem" json:"mem,omitempty"`
}

func (m *ReallocOptions) Reset()                    { *m = ReallocOptions{} }
func (m *ReallocOptions) String() string            { return proto.CompactTextString(m) }
func (*ReallocOptions) ProtoMessage()               {}
func (*ReallocOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReallocOptions) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ReallocOptions) GetCpu() float64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *ReallocOptions) GetMem() int64 {
	if m != nil {
		return m.Mem
	}
	return 0
}

type AddPodOptions struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Favor string `protobuf:"bytes,2,opt,name=favor" json:"favor,omitempty"`
	Desc  string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
}

func (m *AddPodOptions) Reset()                    { *m = AddPodOptions{} }
func (m *AddPodOptions) String() string            { return proto.CompactTextString(m) }
func (*AddPodOptions) ProtoMessage()               {}
func (*AddPodOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AddPodOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddPodOptions) GetFavor() string {
	if m != nil {
		return m.Favor
	}
	return ""
}

func (m *AddPodOptions) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type RemovePodOptions struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RemovePodOptions) Reset()                    { *m = RemovePodOptions{} }
func (m *RemovePodOptions) String() string            { return proto.CompactTextString(m) }
func (*RemovePodOptions) ProtoMessage()               {}
func (*RemovePodOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RemovePodOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetPodOptions struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetPodOptions) Reset()                    { *m = GetPodOptions{} }
func (m *GetPodOptions) String() string            { return proto.CompactTextString(m) }
func (*GetPodOptions) ProtoMessage()               {}
func (*GetPodOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetPodOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AddNodeOptions struct {
	Nodename string `protobuf:"bytes,1,opt,name=nodename" json:"nodename,omitempty"`
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	Podname  string `protobuf:"bytes,3,opt,name=podname" json:"podname,omitempty"`
	Cafile   string `protobuf:"bytes,4,opt,name=cafile" json:"cafile,omitempty"`
	Certfile string `protobuf:"bytes,5,opt,name=certfile" json:"certfile,omitempty"`
	Keyfile  string `protobuf:"bytes,6,opt,name=keyfile" json:"keyfile,omitempty"`
	Public   bool   `protobuf:"varint,7,opt,name=public" json:"public,omitempty"`
}

func (m *AddNodeOptions) Reset()                    { *m = AddNodeOptions{} }
func (m *AddNodeOptions) String() string            { return proto.CompactTextString(m) }
func (*AddNodeOptions) ProtoMessage()               {}
func (*AddNodeOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AddNodeOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *AddNodeOptions) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *AddNodeOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *AddNodeOptions) GetCafile() string {
	if m != nil {
		return m.Cafile
	}
	return ""
}

func (m *AddNodeOptions) GetCertfile() string {
	if m != nil {
		return m.Certfile
	}
	return ""
}

func (m *AddNodeOptions) GetKeyfile() string {
	if m != nil {
		return m.Keyfile
	}
	return ""
}

func (m *AddNodeOptions) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

type RemoveNodeOptions struct {
	Nodename string `protobuf:"bytes,1,opt,name=nodename" json:"nodename,omitempty"`
	Podname  string `protobuf:"bytes,2,opt,name=podname" json:"podname,omitempty"`
}

func (m *RemoveNodeOptions) Reset()                    { *m = RemoveNodeOptions{} }
func (m *RemoveNodeOptions) String() string            { return proto.CompactTextString(m) }
func (*RemoveNodeOptions) ProtoMessage()               {}
func (*RemoveNodeOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *RemoveNodeOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *RemoveNodeOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

type GetNodeOptions struct {
	Podname  string `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	Nodename string `protobuf:"bytes,2,opt,name=nodename" json:"nodename,omitempty"`
}

func (m *GetNodeOptions) Reset()                    { *m = GetNodeOptions{} }
func (m *GetNodeOptions) String() string            { return proto.CompactTextString(m) }
func (*GetNodeOptions) ProtoMessage()               {}
func (*GetNodeOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetNodeOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *GetNodeOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

type ListNodesOptions struct {
	Podname string `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	All     bool   `protobuf:"varint,2,opt,name=all" json:"all,omitempty"`
}

func (m *ListNodesOptions) Reset()                    { *m = ListNodesOptions{} }
func (m *ListNodesOptions) String() string            { return proto.CompactTextString(m) }
func (*ListNodesOptions) ProtoMessage()               {}
func (*ListNodesOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ListNodesOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *ListNodesOptions) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type Build struct {
	Base       string            `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Repo       string            `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	Version    string            `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	WorkingDir string            `protobuf:"bytes,4,opt,name=working_dir,json=workingDir" json:"working_dir,omitempty"`
	Commands   []string          `protobuf:"bytes,5,rep,name=commands" json:"commands,omitempty"`
	Artifacts  map[string]string `protobuf:"bytes,6,rep,name=artifacts" json:"artifacts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Cache      map[string]string `protobuf:"bytes,7,rep,name=cache" json:"cache,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Build) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *Build) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *Build) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Build) GetWorkingDir() string {
	if m != nil {
		return m.WorkingDir
	}
	return ""
}

func (m *Build) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *Build) GetArtifacts() map[string]string {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

func (m *Build) GetCache() map[string]string {
	if m != nil {
		return m.Cache
	}
	return nil
}

type Builds struct {
	Stages []string          `protobuf:"bytes,1,rep,name=stages" json:"stages,omitempty"`
	Builds map[string]*Build `protobuf:"bytes,2,rep,name=builds" json:"builds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Builds) Reset()                    { *m = Builds{} }
func (m *Builds) String() string            { return proto.CompactTextString(m) }
func (*Builds) ProtoMessage()               {}
func (*Builds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Builds) GetStages() []string {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *Builds) GetBuilds() map[string]*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

type BuildImageOptions struct {
	Name   string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	User   string  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Uid    int32   `protobuf:"varint,3,opt,name=uid" json:"uid,omitempty"`
	Tag    string  `protobuf:"bytes,4,opt,name=tag" json:"tag,omitempty"`
	Builds *Builds `protobuf:"bytes,5,opt,name=builds" json:"builds,omitempty"`
}

func (m *BuildImageOptions) Reset()                    { *m = BuildImageOptions{} }
func (m *BuildImageOptions) String() string            { return proto.CompactTextString(m) }
func (*BuildImageOptions) ProtoMessage()               {}
func (*BuildImageOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *BuildImageOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuildImageOptions) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *BuildImageOptions) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *BuildImageOptions) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *BuildImageOptions) GetBuilds() *Builds {
	if m != nil {
		return m.Builds
	}
	return nil
}

type HookOptions struct {
	AfterStart []string `protobuf:"bytes,1,rep,name=after_start,json=afterStart" json:"after_start,omitempty"`
	BeforeStop []string `protobuf:"bytes,2,rep,name=before_stop,json=beforeStop" json:"before_stop,omitempty"`
	Force      bool     `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
}

func (m *HookOptions) Reset()                    { *m = HookOptions{} }
func (m *HookOptions) String() string            { return proto.CompactTextString(m) }
func (*HookOptions) ProtoMessage()               {}
func (*HookOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *HookOptions) GetAfterStart() []string {
	if m != nil {
		return m.AfterStart
	}
	return nil
}

func (m *HookOptions) GetBeforeStop() []string {
	if m != nil {
		return m.BeforeStop
	}
	return nil
}

func (m *HookOptions) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type HealthCheckOptions struct {
	Ports []string `protobuf:"bytes,1,rep,name=ports" json:"ports,omitempty"`
	Url   string   `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Code  int32    `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
}

func (m *HealthCheckOptions) Reset()                    { *m = HealthCheckOptions{} }
func (m *HealthCheckOptions) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckOptions) ProtoMessage()               {}
func (*HealthCheckOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *HealthCheckOptions) GetPorts() []string {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *HealthCheckOptions) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HealthCheckOptions) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type EntrypointOptions struct {
	Name          string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Command       string              `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Privileged    bool                `protobuf:"varint,3,opt,name=privileged" json:"privileged,omitempty"`
	WorkingDir    string              `protobuf:"bytes,4,opt,name=working_dir,json=workingDir" json:"working_dir,omitempty"`
	LogConfig     string              `protobuf:"bytes,5,opt,name=log_config,json=logConfig" json:"log_config,omitempty"`
	Publish       []string            `protobuf:"bytes,6,rep,name=publish" json:"publish,omitempty"`
	Healcheck     *HealthCheckOptions `protobuf:"bytes,7,opt,name=healcheck" json:"healcheck,omitempty"`
	Hook          *HookOptions        `protobuf:"bytes,8,opt,name=hook" json:"hook,omitempty"`
	RestartPolicy string              `protobuf:"bytes,9,opt,name=restart_policy,json=restartPolicy" json:"restart_policy,omitempty"`
	ExtraHosts    []string            `protobuf:"bytes,10,rep,name=extra_hosts,json=extraHosts" json:"extra_hosts,omitempty"`
}

func (m *EntrypointOptions) Reset()                    { *m = EntrypointOptions{} }
func (m *EntrypointOptions) String() string            { return proto.CompactTextString(m) }
func (*EntrypointOptions) ProtoMessage()               {}
func (*EntrypointOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *EntrypointOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EntrypointOptions) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *EntrypointOptions) GetPrivileged() bool {
	if m != nil {
		return m.Privileged
	}
	return false
}

func (m *EntrypointOptions) GetWorkingDir() string {
	if m != nil {
		return m.WorkingDir
	}
	return ""
}

func (m *EntrypointOptions) GetLogConfig() string {
	if m != nil {
		return m.LogConfig
	}
	return ""
}

func (m *EntrypointOptions) GetPublish() []string {
	if m != nil {
		return m.Publish
	}
	return nil
}

func (m *EntrypointOptions) GetHealcheck() *HealthCheckOptions {
	if m != nil {
		return m.Healcheck
	}
	return nil
}

func (m *EntrypointOptions) GetHook() *HookOptions {
	if m != nil {
		return m.Hook
	}
	return nil
}

func (m *EntrypointOptions) GetRestartPolicy() string {
	if m != nil {
		return m.RestartPolicy
	}
	return ""
}

func (m *EntrypointOptions) GetExtraHosts() []string {
	if m != nil {
		return m.ExtraHosts
	}
	return nil
}

type DeployOptions struct {
	Name        string             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Entrypoint  *EntrypointOptions `protobuf:"bytes,2,opt,name=entrypoint" json:"entrypoint,omitempty"`
	Podname     string             `protobuf:"bytes,3,opt,name=podname" json:"podname,omitempty"`
	Nodename    string             `protobuf:"bytes,4,opt,name=nodename" json:"nodename,omitempty"`
	Image       string             `protobuf:"bytes,5,opt,name=image" json:"image,omitempty"`
	ExtraArgs   string             `protobuf:"bytes,6,opt,name=extra_args,json=extraArgs" json:"extra_args,omitempty"`
	CpuQuota    float64            `protobuf:"fixed64,7,opt,name=cpu_quota,json=cpuQuota" json:"cpu_quota,omitempty"`
	Memory      int64              `protobuf:"varint,8,opt,name=memory" json:"memory,omitempty"`
	Count       int32              `protobuf:"varint,9,opt,name=count" json:"count,omitempty"`
	Env         []string           `protobuf:"bytes,10,rep,name=env" json:"env,omitempty"`
	Dns         []string           `protobuf:"bytes,11,rep,name=dns" json:"dns,omitempty"`
	Volumes     []string           `protobuf:"bytes,12,rep,name=volumes" json:"volumes,omitempty"`
	Networks    map[string]string  `protobuf:"bytes,13,rep,name=networks" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Networkmode string             `protobuf:"bytes,14,opt,name=networkmode" json:"networkmode,omitempty"`
	User        string             `protobuf:"bytes,15,opt,name=user" json:"user,omitempty"`
	Debug       bool               `protobuf:"varint,16,opt,name=debug" json:"debug,omitempty"`
	OpenStdin   bool               `protobuf:"varint,17,opt,name=openStdin" json:"openStdin,omitempty"`
	Meta        map[string]string  `protobuf:"bytes,18,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DeployOptions) Reset()                    { *m = DeployOptions{} }
func (m *DeployOptions) String() string            { return proto.CompactTextString(m) }
func (*DeployOptions) ProtoMessage()               {}
func (*DeployOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *DeployOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployOptions) GetEntrypoint() *EntrypointOptions {
	if m != nil {
		return m.Entrypoint
	}
	return nil
}

func (m *DeployOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *DeployOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *DeployOptions) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DeployOptions) GetExtraArgs() string {
	if m != nil {
		return m.ExtraArgs
	}
	return ""
}

func (m *DeployOptions) GetCpuQuota() float64 {
	if m != nil {
		return m.CpuQuota
	}
	return 0
}

func (m *DeployOptions) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *DeployOptions) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DeployOptions) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *DeployOptions) GetDns() []string {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *DeployOptions) GetVolumes() []string {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *DeployOptions) GetNetworks() map[string]string {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *DeployOptions) GetNetworkmode() string {
	if m != nil {
		return m.Networkmode
	}
	return ""
}

func (m *DeployOptions) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *DeployOptions) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *DeployOptions) GetOpenStdin() bool {
	if m != nil {
		return m.OpenStdin
	}
	return false
}

func (m *DeployOptions) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

type RemoveImageOptions struct {
	Podname  string   `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	Nodename string   `protobuf:"bytes,2,opt,name=nodename" json:"nodename,omitempty"`
	Images   []string `protobuf:"bytes,3,rep,name=images" json:"images,omitempty"`
}

func (m *RemoveImageOptions) Reset()                    { *m = RemoveImageOptions{} }
func (m *RemoveImageOptions) String() string            { return proto.CompactTextString(m) }
func (*RemoveImageOptions) ProtoMessage()               {}
func (*RemoveImageOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *RemoveImageOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *RemoveImageOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *RemoveImageOptions) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

type BackupOptions struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	SrcPath string `protobuf:"bytes,2,opt,name=src_path,json=srcPath" json:"src_path,omitempty"`
}

func (m *BackupOptions) Reset()                    { *m = BackupOptions{} }
func (m *BackupOptions) String() string            { return proto.CompactTextString(m) }
func (*BackupOptions) ProtoMessage()               {}
func (*BackupOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *BackupOptions) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BackupOptions) GetSrcPath() string {
	if m != nil {
		return m.SrcPath
	}
	return ""
}

type ErrorDetail struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ErrorDetail) Reset()                    { *m = ErrorDetail{} }
func (m *ErrorDetail) String() string            { return proto.CompactTextString(m) }
func (*ErrorDetail) ProtoMessage()               {}
func (*ErrorDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ErrorDetail) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ErrorDetail) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type BuildImageMessage struct {
	Status      string       `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Progress    string       `protobuf:"bytes,2,opt,name=progress" json:"progress,omitempty"`
	Error       string       `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Stream      string       `protobuf:"bytes,4,opt,name=stream" json:"stream,omitempty"`
	ErrorDetail *ErrorDetail `protobuf:"bytes,5,opt,name=error_detail,json=errorDetail" json:"error_detail,omitempty"`
}

func (m *BuildImageMessage) Reset()                    { *m = BuildImageMessage{} }
func (m *BuildImageMessage) String() string            { return proto.CompactTextString(m) }
func (*BuildImageMessage) ProtoMessage()               {}
func (*BuildImageMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *BuildImageMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *BuildImageMessage) GetProgress() string {
	if m != nil {
		return m.Progress
	}
	return ""
}

func (m *BuildImageMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *BuildImageMessage) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *BuildImageMessage) GetErrorDetail() *ErrorDetail {
	if m != nil {
		return m.ErrorDetail
	}
	return nil
}

type CreateContainerMessage struct {
	Podname  string            `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	Nodename string            `protobuf:"bytes,2,opt,name=nodename" json:"nodename,omitempty"`
	Id       string            `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Name     string            `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Error    string            `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	Success  bool              `protobuf:"varint,6,opt,name=success" json:"success,omitempty"`
	Cpu      map[string]int64  `protobuf:"bytes,7,rep,name=cpu" json:"cpu,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Memory   int64             `protobuf:"varint,8,opt,name=memory" json:"memory,omitempty"`
	Publish  map[string]string `protobuf:"bytes,9,rep,name=publish" json:"publish,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Hook     []byte            `protobuf:"bytes,10,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (m *CreateContainerMessage) Reset()                    { *m = CreateContainerMessage{} }
func (m *CreateContainerMessage) String() string            { return proto.CompactTextString(m) }
func (*CreateContainerMessage) ProtoMessage()               {}
func (*CreateContainerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *CreateContainerMessage) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *CreateContainerMessage) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *CreateContainerMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateContainerMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateContainerMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CreateContainerMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CreateContainerMessage) GetCpu() map[string]int64 {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *CreateContainerMessage) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *CreateContainerMessage) GetPublish() map[string]string {
	if m != nil {
		return m.Publish
	}
	return nil
}

func (m *CreateContainerMessage) GetHook() []byte {
	if m != nil {
		return m.Hook
	}
	return nil
}

type RunAndWaitMessage struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RunAndWaitMessage) Reset()                    { *m = RunAndWaitMessage{} }
func (m *RunAndWaitMessage) String() string            { return proto.CompactTextString(m) }
func (*RunAndWaitMessage) ProtoMessage()               {}
func (*RunAndWaitMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *RunAndWaitMessage) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *RunAndWaitMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RemoveImageMessage struct {
	Image    string   `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Success  bool     `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Messages []string `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (m *RemoveImageMessage) Reset()                    { *m = RemoveImageMessage{} }
func (m *RemoveImageMessage) String() string            { return proto.CompactTextString(m) }
func (*RemoveImageMessage) ProtoMessage()               {}
func (*RemoveImageMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *RemoveImageMessage) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *RemoveImageMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RemoveImageMessage) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

type RemoveContainerMessage struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RemoveContainerMessage) Reset()                    { *m = RemoveContainerMessage{} }
func (m *RemoveContainerMessage) String() string            { return proto.CompactTextString(m) }
func (*RemoveContainerMessage) ProtoMessage()               {}
func (*RemoveContainerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *RemoveContainerMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RemoveContainerMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RemoveContainerMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReallocResourceMessage struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *ReallocResourceMessage) Reset()                    { *m = ReallocResourceMessage{} }
func (m *ReallocResourceMessage) String() string            { return proto.CompactTextString(m) }
func (*ReallocResourceMessage) ProtoMessage()               {}
func (*ReallocResourceMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ReallocResourceMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReallocResourceMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type BackupMessage struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Size   int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Error  string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Path   string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
}

func (m *BackupMessage) Reset()                    { *m = BackupMessage{} }
func (m *BackupMessage) String() string            { return proto.CompactTextString(m) }
func (*BackupMessage) ProtoMessage()               {}
func (*BackupMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *BackupMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *BackupMessage) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *BackupMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *BackupMessage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type RunAndWaitOptions struct {
	DeployOptions *DeployOptions `protobuf:"bytes,1,opt,name=DeployOptions" json:"DeployOptions,omitempty"`
	Cmd           []byte         `protobuf:"bytes,2,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	Timeout       int32          `protobuf:"varint,3,opt,name=Timeout" json:"Timeout,omitempty"`
}

func (m *RunAndWaitOptions) Reset()                    { *m = RunAndWaitOptions{} }
func (m *RunAndWaitOptions) String() string            { return proto.CompactTextString(m) }
func (*RunAndWaitOptions) ProtoMessage()               {}
func (*RunAndWaitOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *RunAndWaitOptions) GetDeployOptions() *DeployOptions {
	if m != nil {
		return m.DeployOptions
	}
	return nil
}

func (m *RunAndWaitOptions) GetCmd() []byte {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *RunAndWaitOptions) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*Pod)(nil), "pb.Pod")
	proto.RegisterType((*Pods)(nil), "pb.Pods")
	proto.RegisterType((*Network)(nil), "pb.Network")
	proto.RegisterType((*Networks)(nil), "pb.Networks")
	proto.RegisterType((*Node)(nil), "pb.Node")
	proto.RegisterType((*Nodes)(nil), "pb.Nodes")
	proto.RegisterType((*NodeAvailable)(nil), "pb.NodeAvailable")
	proto.RegisterType((*Container)(nil), "pb.Container")
	proto.RegisterType((*Containers)(nil), "pb.Containers")
	proto.RegisterType((*ContainerID)(nil), "pb.ContainerID")
	proto.RegisterType((*ContainerIDs)(nil), "pb.ContainerIDs")
	proto.RegisterType((*RemoveContainerOptions)(nil), "pb.RemoveContainerOptions")
	proto.RegisterType((*ReallocOptions)(nil), "pb.ReallocOptions")
	proto.RegisterType((*AddPodOptions)(nil), "pb.AddPodOptions")
	proto.RegisterType((*RemovePodOptions)(nil), "pb.RemovePodOptions")
	proto.RegisterType((*GetPodOptions)(nil), "pb.GetPodOptions")
	proto.RegisterType((*AddNodeOptions)(nil), "pb.AddNodeOptions")
	proto.RegisterType((*RemoveNodeOptions)(nil), "pb.RemoveNodeOptions")
	proto.RegisterType((*GetNodeOptions)(nil), "pb.GetNodeOptions")
	proto.RegisterType((*ListNodesOptions)(nil), "pb.ListNodesOptions")
	proto.RegisterType((*Build)(nil), "pb.Build")
	proto.RegisterType((*Builds)(nil), "pb.Builds")
	proto.RegisterType((*BuildImageOptions)(nil), "pb.BuildImageOptions")
	proto.RegisterType((*HookOptions)(nil), "pb.HookOptions")
	proto.RegisterType((*HealthCheckOptions)(nil), "pb.HealthCheckOptions")
	proto.RegisterType((*EntrypointOptions)(nil), "pb.EntrypointOptions")
	proto.RegisterType((*DeployOptions)(nil), "pb.DeployOptions")
	proto.RegisterType((*RemoveImageOptions)(nil), "pb.RemoveImageOptions")
	proto.RegisterType((*BackupOptions)(nil), "pb.BackupOptions")
	proto.RegisterType((*ErrorDetail)(nil), "pb.ErrorDetail")
	proto.RegisterType((*BuildImageMessage)(nil), "pb.BuildImageMessage")
	proto.RegisterType((*CreateContainerMessage)(nil), "pb.CreateContainerMessage")
	proto.RegisterType((*RunAndWaitMessage)(nil), "pb.RunAndWaitMessage")
	proto.RegisterType((*RemoveImageMessage)(nil), "pb.RemoveImageMessage")
	proto.RegisterType((*RemoveContainerMessage)(nil), "pb.RemoveContainerMessage")
	proto.RegisterType((*ReallocResourceMessage)(nil), "pb.ReallocResourceMessage")
	proto.RegisterType((*BackupMessage)(nil), "pb.BackupMessage")
	proto.RegisterType((*RunAndWaitOptions)(nil), "pb.RunAndWaitOptions")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoreRPC service

type CoreRPCClient interface {
	ListPods(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pods, error)
	AddPod(ctx context.Context, in *AddPodOptions, opts ...grpc.CallOption) (*Pod, error)
	RemovePod(ctx context.Context, in *RemovePodOptions, opts ...grpc.CallOption) (*Empty, error)
	GetPod(ctx context.Context, in *GetPodOptions, opts ...grpc.CallOption) (*Pod, error)
	AddNode(ctx context.Context, in *AddNodeOptions, opts ...grpc.CallOption) (*Node, error)
	RemoveNode(ctx context.Context, in *RemoveNodeOptions, opts ...grpc.CallOption) (*Pod, error)
	GetNode(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Node, error)
	GetNodeByName(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Node, error)
	ListPodNodes(ctx context.Context, in *ListNodesOptions, opts ...grpc.CallOption) (*Nodes, error)
	GetContainer(ctx context.Context, in *ContainerID, opts ...grpc.CallOption) (*Container, error)
	GetContainers(ctx context.Context, in *ContainerIDs, opts ...grpc.CallOption) (*Containers, error)
	ListNetworks(ctx context.Context, in *GetPodOptions, opts ...grpc.CallOption) (*Networks, error)
	SetNodeAvailable(ctx context.Context, in *NodeAvailable, opts ...grpc.CallOption) (*Node, error)
	BuildImage(ctx context.Context, in *BuildImageOptions, opts ...grpc.CallOption) (CoreRPC_BuildImageClient, error)
	CreateContainer(ctx context.Context, in *DeployOptions, opts ...grpc.CallOption) (CoreRPC_CreateContainerClient, error)
	RunAndWait(ctx context.Context, opts ...grpc.CallOption) (CoreRPC_RunAndWaitClient, error)
	RemoveContainer(ctx context.Context, in *RemoveContainerOptions, opts ...grpc.CallOption) (CoreRPC_RemoveContainerClient, error)
	ReallocResource(ctx context.Context, in *ReallocOptions, opts ...grpc.CallOption) (CoreRPC_ReallocResourceClient, error)
	RemoveImage(ctx context.Context, in *RemoveImageOptions, opts ...grpc.CallOption) (CoreRPC_RemoveImageClient, error)
	Backup(ctx context.Context, in *BackupOptions, opts ...grpc.CallOption) (*BackupMessage, error)
}

type coreRPCClient struct {
	cc *grpc.ClientConn
}

func NewCoreRPCClient(cc *grpc.ClientConn) CoreRPCClient {
	return &coreRPCClient{cc}
}

func (c *coreRPCClient) ListPods(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pods, error) {
	out := new(Pods)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ListPods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) AddPod(ctx context.Context, in *AddPodOptions, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/AddPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) RemovePod(ctx context.Context, in *RemovePodOptions, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/RemovePod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetPod(ctx context.Context, in *GetPodOptions, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) AddNode(ctx context.Context, in *AddNodeOptions, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) RemoveNode(ctx context.Context, in *RemoveNodeOptions, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/RemoveNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetNode(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetNodeByName(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetNodeByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) ListPodNodes(ctx context.Context, in *ListNodesOptions, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ListPodNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetContainer(ctx context.Context, in *ContainerID, opts ...grpc.CallOption) (*Container, error) {
	out := new(Container)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetContainers(ctx context.Context, in *ContainerIDs, opts ...grpc.CallOption) (*Containers, error) {
	out := new(Containers)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) ListNetworks(ctx context.Context, in *GetPodOptions, opts ...grpc.CallOption) (*Networks, error) {
	out := new(Networks)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ListNetworks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) SetNodeAvailable(ctx context.Context, in *NodeAvailable, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/SetNodeAvailable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) BuildImage(ctx context.Context, in *BuildImageOptions, opts ...grpc.CallOption) (CoreRPC_BuildImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[0], c.cc, "/pb.CoreRPC/BuildImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCBuildImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_BuildImageClient interface {
	Recv() (*BuildImageMessage, error)
	grpc.ClientStream
}

type coreRPCBuildImageClient struct {
	grpc.ClientStream
}

func (x *coreRPCBuildImageClient) Recv() (*BuildImageMessage, error) {
	m := new(BuildImageMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) CreateContainer(ctx context.Context, in *DeployOptions, opts ...grpc.CallOption) (CoreRPC_CreateContainerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[1], c.cc, "/pb.CoreRPC/CreateContainer", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCCreateContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_CreateContainerClient interface {
	Recv() (*CreateContainerMessage, error)
	grpc.ClientStream
}

type coreRPCCreateContainerClient struct {
	grpc.ClientStream
}

func (x *coreRPCCreateContainerClient) Recv() (*CreateContainerMessage, error) {
	m := new(CreateContainerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) RunAndWait(ctx context.Context, opts ...grpc.CallOption) (CoreRPC_RunAndWaitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[2], c.cc, "/pb.CoreRPC/RunAndWait", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCRunAndWaitClient{stream}
	return x, nil
}

type CoreRPC_RunAndWaitClient interface {
	Send(*RunAndWaitOptions) error
	Recv() (*RunAndWaitMessage, error)
	grpc.ClientStream
}

type coreRPCRunAndWaitClient struct {
	grpc.ClientStream
}

func (x *coreRPCRunAndWaitClient) Send(m *RunAndWaitOptions) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coreRPCRunAndWaitClient) Recv() (*RunAndWaitMessage, error) {
	m := new(RunAndWaitMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) RemoveContainer(ctx context.Context, in *RemoveContainerOptions, opts ...grpc.CallOption) (CoreRPC_RemoveContainerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[3], c.cc, "/pb.CoreRPC/RemoveContainer", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCRemoveContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_RemoveContainerClient interface {
	Recv() (*RemoveContainerMessage, error)
	grpc.ClientStream
}

type coreRPCRemoveContainerClient struct {
	grpc.ClientStream
}

func (x *coreRPCRemoveContainerClient) Recv() (*RemoveContainerMessage, error) {
	m := new(RemoveContainerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) ReallocResource(ctx context.Context, in *ReallocOptions, opts ...grpc.CallOption) (CoreRPC_ReallocResourceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[4], c.cc, "/pb.CoreRPC/ReallocResource", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCReallocResourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_ReallocResourceClient interface {
	Recv() (*ReallocResourceMessage, error)
	grpc.ClientStream
}

type coreRPCReallocResourceClient struct {
	grpc.ClientStream
}

func (x *coreRPCReallocResourceClient) Recv() (*ReallocResourceMessage, error) {
	m := new(ReallocResourceMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) RemoveImage(ctx context.Context, in *RemoveImageOptions, opts ...grpc.CallOption) (CoreRPC_RemoveImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[5], c.cc, "/pb.CoreRPC/RemoveImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCRemoveImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_RemoveImageClient interface {
	Recv() (*RemoveImageMessage, error)
	grpc.ClientStream
}

type coreRPCRemoveImageClient struct {
	grpc.ClientStream
}

func (x *coreRPCRemoveImageClient) Recv() (*RemoveImageMessage, error) {
	m := new(RemoveImageMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) Backup(ctx context.Context, in *BackupOptions, opts ...grpc.CallOption) (*BackupMessage, error) {
	out := new(BackupMessage)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/Backup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoreRPC service

type CoreRPCServer interface {
	ListPods(context.Context, *Empty) (*Pods, error)
	AddPod(context.Context, *AddPodOptions) (*Pod, error)
	RemovePod(context.Context, *RemovePodOptions) (*Empty, error)
	GetPod(context.Context, *GetPodOptions) (*Pod, error)
	AddNode(context.Context, *AddNodeOptions) (*Node, error)
	RemoveNode(context.Context, *RemoveNodeOptions) (*Pod, error)
	GetNode(context.Context, *GetNodeOptions) (*Node, error)
	GetNodeByName(context.Context, *GetNodeOptions) (*Node, error)
	ListPodNodes(context.Context, *ListNodesOptions) (*Nodes, error)
	GetContainer(context.Context, *ContainerID) (*Container, error)
	GetContainers(context.Context, *ContainerIDs) (*Containers, error)
	ListNetworks(context.Context, *GetPodOptions) (*Networks, error)
	SetNodeAvailable(context.Context, *NodeAvailable) (*Node, error)
	BuildImage(*BuildImageOptions, CoreRPC_BuildImageServer) error
	CreateContainer(*DeployOptions, CoreRPC_CreateContainerServer) error
	RunAndWait(CoreRPC_RunAndWaitServer) error
	RemoveContainer(*RemoveContainerOptions, CoreRPC_RemoveContainerServer) error
	ReallocResource(*ReallocOptions, CoreRPC_ReallocResourceServer) error
	RemoveImage(*RemoveImageOptions, CoreRPC_RemoveImageServer) error
	Backup(context.Context, *BackupOptions) (*BackupMessage, error)
}

func RegisterCoreRPCServer(s *grpc.Server, srv CoreRPCServer) {
	s.RegisterService(&_CoreRPC_serviceDesc, srv)
}

func _CoreRPC_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ListPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ListPods(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_AddPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPodOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).AddPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/AddPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).AddPod(ctx, req.(*AddPodOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_RemovePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePodOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).RemovePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/RemovePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).RemovePod(ctx, req.(*RemovePodOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetPod(ctx, req.(*GetPodOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).AddNode(ctx, req.(*AddNodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).RemoveNode(ctx, req.(*RemoveNodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetNode(ctx, req.(*GetNodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetNodeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetNodeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetNodeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetNodeByName(ctx, req.(*GetNodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_ListPodNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ListPodNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ListPodNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ListPodNodes(ctx, req.(*ListNodesOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetContainer(ctx, req.(*ContainerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetContainers(ctx, req.(*ContainerIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ListNetworks(ctx, req.(*GetPodOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_SetNodeAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAvailable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).SetNodeAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/SetNodeAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).SetNodeAvailable(ctx, req.(*NodeAvailable))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_BuildImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildImageOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).BuildImage(m, &coreRPCBuildImageServer{stream})
}

type CoreRPC_BuildImageServer interface {
	Send(*BuildImageMessage) error
	grpc.ServerStream
}

type coreRPCBuildImageServer struct {
	grpc.ServerStream
}

func (x *coreRPCBuildImageServer) Send(m *BuildImageMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_CreateContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).CreateContainer(m, &coreRPCCreateContainerServer{stream})
}

type CoreRPC_CreateContainerServer interface {
	Send(*CreateContainerMessage) error
	grpc.ServerStream
}

type coreRPCCreateContainerServer struct {
	grpc.ServerStream
}

func (x *coreRPCCreateContainerServer) Send(m *CreateContainerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_RunAndWait_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoreRPCServer).RunAndWait(&coreRPCRunAndWaitServer{stream})
}

type CoreRPC_RunAndWaitServer interface {
	Send(*RunAndWaitMessage) error
	Recv() (*RunAndWaitOptions, error)
	grpc.ServerStream
}

type coreRPCRunAndWaitServer struct {
	grpc.ServerStream
}

func (x *coreRPCRunAndWaitServer) Send(m *RunAndWaitMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coreRPCRunAndWaitServer) Recv() (*RunAndWaitOptions, error) {
	m := new(RunAndWaitOptions)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CoreRPC_RemoveContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemoveContainerOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).RemoveContainer(m, &coreRPCRemoveContainerServer{stream})
}

type CoreRPC_RemoveContainerServer interface {
	Send(*RemoveContainerMessage) error
	grpc.ServerStream
}

type coreRPCRemoveContainerServer struct {
	grpc.ServerStream
}

func (x *coreRPCRemoveContainerServer) Send(m *RemoveContainerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_ReallocResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReallocOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).ReallocResource(m, &coreRPCReallocResourceServer{stream})
}

type CoreRPC_ReallocResourceServer interface {
	Send(*ReallocResourceMessage) error
	grpc.ServerStream
}

type coreRPCReallocResourceServer struct {
	grpc.ServerStream
}

func (x *coreRPCReallocResourceServer) Send(m *ReallocResourceMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_RemoveImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemoveImageOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).RemoveImage(m, &coreRPCRemoveImageServer{stream})
}

type CoreRPC_RemoveImageServer interface {
	Send(*RemoveImageMessage) error
	grpc.ServerStream
}

type coreRPCRemoveImageServer struct {
	grpc.ServerStream
}

func (x *coreRPCRemoveImageServer) Send(m *RemoveImageMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).Backup(ctx, req.(*BackupOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoreRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CoreRPC",
	HandlerType: (*CoreRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPods",
			Handler:    _CoreRPC_ListPods_Handler,
		},
		{
			MethodName: "AddPod",
			Handler:    _CoreRPC_AddPod_Handler,
		},
		{
			MethodName: "RemovePod",
			Handler:    _CoreRPC_RemovePod_Handler,
		},
		{
			MethodName: "GetPod",
			Handler:    _CoreRPC_GetPod_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _CoreRPC_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _CoreRPC_RemoveNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _CoreRPC_GetNode_Handler,
		},
		{
			MethodName: "GetNodeByName",
			Handler:    _CoreRPC_GetNodeByName_Handler,
		},
		{
			MethodName: "ListPodNodes",
			Handler:    _CoreRPC_ListPodNodes_Handler,
		},
		{
			MethodName: "GetContainer",
			Handler:    _CoreRPC_GetContainer_Handler,
		},
		{
			MethodName: "GetContainers",
			Handler:    _CoreRPC_GetContainers_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _CoreRPC_ListNetworks_Handler,
		},
		{
			MethodName: "SetNodeAvailable",
			Handler:    _CoreRPC_SetNodeAvailable_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _CoreRPC_Backup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BuildImage",
			Handler:       _CoreRPC_BuildImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateContainer",
			Handler:       _CoreRPC_CreateContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RunAndWait",
			Handler:       _CoreRPC_RunAndWait_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RemoveContainer",
			Handler:       _CoreRPC_RemoveContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReallocResource",
			Handler:       _CoreRPC_ReallocResource_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RemoveImage",
			Handler:       _CoreRPC_RemoveImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core.proto",
}

func init() { proto.RegisterFile("core.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2041 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xdd, 0x72, 0xe3, 0x48,
	0xf5, 0x8f, 0x2c, 0x3b, 0xb1, 0x8f, 0x9d, 0xc4, 0xe9, 0xca, 0xa6, 0xf4, 0xd7, 0xfe, 0x77, 0x27,
	0xab, 0x14, 0x3b, 0x81, 0xaa, 0xcd, 0x86, 0x0c, 0xbb, 0xb3, 0x35, 0x43, 0x2d, 0x24, 0xce, 0x30,
	0x13, 0x60, 0x86, 0xa0, 0xa1, 0x8a, 0x1b, 0xaa, 0x8c, 0x2c, 0x75, 0x1c, 0x55, 0x6c, 0xb5, 0x50,
	0x4b, 0x61, 0xc3, 0x2d, 0xef, 0xc0, 0x15, 0x2f, 0x40, 0x15, 0x8f, 0xc0, 0x03, 0xf0, 0x14, 0x5c,
	0xf0, 0x12, 0xdc, 0x52, 0xe7, 0x74, 0xb7, 0x3e, 0x1c, 0x27, 0x21, 0x73, 0xa5, 0x3e, 0x47, 0xdd,
	0xa7, 0xcf, 0xe7, 0xaf, 0xfb, 0x34, 0x40, 0x28, 0x32, 0x7e, 0x90, 0x66, 0x22, 0x17, 0xac, 0x95,
	0x4e, 0xbc, 0x35, 0xe8, 0xbc, 0x9a, 0xa7, 0xf9, 0x8d, 0xf7, 0x05, 0xd8, 0xe7, 0x22, 0x62, 0x0c,
	0xda, 0x49, 0x30, 0xe7, 0x8e, 0xb5, 0x6b, 0xed, 0xf7, 0x7c, 0x1a, 0x23, 0x2f, 0xe2, 0x32, 0x74,
	0x5a, 0x8a, 0x87, 0x63, 0x6f, 0x0f, 0xda, 0xe7, 0x22, 0x92, 0xec, 0x63, 0x68, 0xa7, 0x22, 0x92,
	0x8e, 0xb5, 0x6b, 0xef, 0xf7, 0x8f, 0xd6, 0x0e, 0xd2, 0xc9, 0xc1, 0xb9, 0x88, 0x7c, 0x62, 0x7a,
	0xcf, 0x61, 0xed, 0x1d, 0xcf, 0xff, 0x28, 0xb2, 0xab, 0xa5, 0x72, 0x1d, 0x58, 0x93, 0xc5, 0x24,
	0xe1, 0xb9, 0x74, 0x5a, 0xbb, 0xf6, 0x7e, 0xcf, 0x37, 0xa4, 0xf7, 0x0c, 0xba, 0x7a, 0xa1, 0x64,
	0x4f, 0xa1, 0x9b, 0xe8, 0xb1, 0xde, 0xa5, 0x8f, 0xbb, 0xe8, 0xff, 0x7e, 0xf9, 0xd3, 0xfb, 0x8f,
	0x05, 0xed, 0x77, 0x22, 0xe2, 0x4b, 0xf7, 0x72, 0xa1, 0xcb, 0x93, 0x28, 0x15, 0x71, 0x92, 0x6b,
	0x3b, 0x4a, 0x1a, 0xf5, 0x48, 0x45, 0x44, 0x4b, 0x6c, 0xfa, 0x65, 0x48, 0xb6, 0x03, 0xab, 0x69,
	0x31, 0x99, 0xc5, 0xa1, 0xd3, 0xde, 0xb5, 0xf6, 0xbb, 0xbe, 0xa6, 0xd8, 0x1e, 0xd8, 0x61, 0x5a,
	0x38, 0x1d, 0x52, 0x67, 0x8b, 0xd4, 0x11, 0x11, 0x3f, 0x18, 0xa5, 0xc5, 0xab, 0x24, 0xcf, 0x6e,
	0x7c, 0xfc, 0x8b, 0x6a, 0xc4, 0xc9, 0x85, 0x70, 0x56, 0x95, 0x1a, 0x38, 0x66, 0xff, 0x0f, 0xbd,
	0xe0, 0x3a, 0x88, 0x67, 0xc1, 0x64, 0xc6, 0x9d, 0x35, 0x92, 0x59, 0x31, 0xdc, 0xaf, 0xa1, 0x6b,
	0x44, 0xb0, 0x21, 0xd8, 0x57, 0xfc, 0x46, 0xdb, 0x80, 0x43, 0xb6, 0x0d, 0x9d, 0xeb, 0x60, 0x56,
	0x70, 0xd2, 0xdf, 0xf6, 0x15, 0xf1, 0xa2, 0xf5, 0x8d, 0xe5, 0x3d, 0x85, 0x0e, 0xee, 0x2f, 0xd9,
	0xa7, 0xd0, 0x49, 0x70, 0xa0, 0x1d, 0xd5, 0x35, 0x9a, 0xf9, 0x8a, 0xed, 0x85, 0xb0, 0x8e, 0xe4,
	0xb1, 0xd9, 0x11, 0xdd, 0x82, 0x7f, 0x6a, 0xee, 0x2a, 0xe9, 0xba, 0x5b, 0x5a, 0x4d, 0xb7, 0x34,
	0xac, 0xb0, 0x17, 0xac, 0xf0, 0x6e, 0xa0, 0x37, 0x12, 0x49, 0x1e, 0xc4, 0x09, 0xcf, 0xd8, 0x06,
	0xb4, 0xe2, 0x48, 0x8b, 0x6e, 0xc5, 0xd1, 0x3d, 0x42, 0xeb, 0xaa, 0xd8, 0x0b, 0xaa, 0x98, 0x88,
	0xb6, 0x9b, 0x59, 0x49, 0xee, 0xed, 0x54, 0xee, 0xf5, 0x5e, 0x02, 0x94, 0x5b, 0x4b, 0xf6, 0x05,
	0x66, 0xbb, 0xa1, 0xb4, 0x4b, 0xd6, 0xd1, 0x25, 0xe5, 0x1c, 0xbf, 0x36, 0xc1, 0xfb, 0x04, 0xfa,
	0xe5, 0x8f, 0xb3, 0xd3, 0x45, 0xcd, 0xbd, 0x5d, 0x18, 0xd4, 0x7e, 0x4b, 0x0c, 0x50, 0xac, 0x13,
	0xbf, 0xe7, 0xe3, 0xd0, 0xfb, 0x29, 0xec, 0xf8, 0x7c, 0x2e, 0xae, 0x79, 0x39, 0xef, 0x57, 0x69,
	0x1e, 0x8b, 0x64, 0xc9, 0x5c, 0x0c, 0xe6, 0x85, 0xc8, 0x42, 0xe5, 0x85, 0xae, 0xaf, 0x08, 0xef,
	0x67, 0xb0, 0xe1, 0xf3, 0x60, 0x36, 0x13, 0xe1, 0xdd, 0x2b, 0x87, 0x2a, 0xf7, 0x70, 0x9d, 0xa5,
	0x12, 0x6d, 0x08, 0xf6, 0x9c, 0xcf, 0xc9, 0x69, 0xb6, 0x8f, 0x43, 0xef, 0x2d, 0xac, 0x1f, 0x47,
	0xd1, 0xb9, 0x88, 0x8c, 0x98, 0x65, 0x25, 0x81, 0x2a, 0x04, 0xd7, 0x22, 0xd3, 0x81, 0x50, 0x44,
	0x59, 0xec, 0x76, 0xad, 0xd8, 0x3f, 0x87, 0xa1, 0x32, 0xec, 0x7e, 0x89, 0xde, 0x1e, 0xac, 0xbf,
	0xe6, 0xf9, 0x03, 0x93, 0xfe, 0x69, 0xc1, 0xc6, 0x71, 0x14, 0x61, 0x1e, 0x9a, 0x69, 0xf7, 0x65,
	0xe1, 0x07, 0x17, 0x6e, 0x18, 0x5c, 0xc4, 0x33, 0x93, 0x32, 0x9a, 0x42, 0x69, 0x21, 0xcf, 0x72,
	0xfa, 0xa3, 0x12, 0xa7, 0xa4, 0x51, 0xda, 0x15, 0xbf, 0xa1, 0x5f, 0xaa, 0x64, 0x0d, 0x59, 0x83,
	0x81, 0xb5, 0x3a, 0x0c, 0x78, 0x67, 0xb0, 0xa5, 0xfc, 0xf2, 0xbf, 0x1a, 0x73, 0x67, 0xf6, 0x63,
	0xe4, 0x5f, 0xf3, 0xbc, 0x2e, 0xa7, 0x36, 0xd7, 0xba, 0xbb, 0x52, 0x5a, 0xcd, 0x1d, 0xbc, 0x6f,
	0x61, 0xf8, 0xcb, 0x58, 0x92, 0x20, 0xf9, 0xb0, 0xa4, 0x21, 0xd8, 0xc1, 0x6c, 0xa6, 0x73, 0x10,
	0x87, 0xde, 0xbf, 0x5b, 0xd0, 0x39, 0x29, 0xe2, 0x19, 0x9d, 0x04, 0x93, 0x40, 0x96, 0xb1, 0xc3,
	0x31, 0xf2, 0x32, 0x9e, 0x0a, 0x73, 0x12, 0xe0, 0x18, 0xa5, 0x5f, 0xf3, 0x4c, 0xc6, 0x22, 0x31,
	0x41, 0xd0, 0x24, 0x7b, 0x02, 0x7d, 0x44, 0xe6, 0x38, 0x99, 0x8e, 0xa3, 0x38, 0xd3, 0x91, 0x00,
	0xcd, 0x3a, 0x8d, 0x33, 0x8a, 0x86, 0x98, 0xcf, 0x83, 0x24, 0x92, 0x84, 0xa5, 0x18, 0x0d, 0x4d,
	0xb3, 0xaf, 0xa1, 0x17, 0x64, 0x79, 0x7c, 0x11, 0x84, 0xb9, 0x74, 0x56, 0xa9, 0x76, 0x1d, 0xac,
	0x5d, 0x52, 0xee, 0xe0, 0xd8, 0xfc, 0x52, 0x78, 0x5b, 0x4d, 0x65, 0x3f, 0x80, 0x4e, 0x18, 0x84,
	0x97, 0x88, 0xae, 0xb8, 0x66, 0xbb, 0x5a, 0x33, 0x42, 0xb6, 0x9a, 0xaf, 0xa6, 0xb8, 0x3f, 0x86,
	0x8d, 0xa6, 0xa0, 0x87, 0x50, 0xb7, 0x57, 0x43, 0x5d, 0xf7, 0x1b, 0x80, 0x4a, 0xe4, 0x63, 0x56,
	0x7a, 0x7f, 0xb1, 0x60, 0x95, 0x74, 0x92, 0x98, 0x5a, 0x32, 0x0f, 0xa6, 0xdc, 0x94, 0xb8, 0xa6,
	0xd8, 0x01, 0xac, 0x4e, 0x68, 0x06, 0x1d, 0x8d, 0xfd, 0xa3, 0x9d, 0xd2, 0x0e, 0xa9, 0x3f, 0xca,
	0x12, 0x3d, 0xcb, 0x3d, 0x85, 0x7e, 0x8d, 0xbd, 0x44, 0x9b, 0x27, 0x75, 0x6d, 0xfa, 0x47, 0xbd,
	0x52, 0x5e, 0x5d, 0xb1, 0x3f, 0x5b, 0xb0, 0x45, 0xcc, 0xb3, 0x79, 0x30, 0xe5, 0xf7, 0x81, 0x07,
	0x83, 0x76, 0x21, 0xb9, 0xc1, 0x0e, 0x1a, 0xe3, 0xa6, 0x45, 0x1c, 0x51, 0x16, 0x74, 0x7c, 0x1c,
	0x22, 0x27, 0x0f, 0xa6, 0x3a, 0xf2, 0x38, 0x64, 0x5e, 0x69, 0x57, 0x87, 0xf4, 0x80, 0xca, 0x2e,
	0x63, 0x8b, 0xc7, 0xa1, 0xff, 0x46, 0x88, 0x2b, 0xb3, 0xfd, 0x13, 0xe8, 0x07, 0x17, 0x39, 0xcf,
	0xc6, 0x32, 0x0f, 0xb2, 0x5c, 0xfb, 0x09, 0x88, 0xf5, 0x1e, 0x39, 0x38, 0x61, 0xc2, 0x2f, 0x44,
	0xc6, 0xc7, 0x32, 0x17, 0xa9, 0xbe, 0x4b, 0x80, 0x62, 0xbd, 0xcf, 0x45, 0x5a, 0x81, 0xad, 0x5d,
	0x07, 0xdb, 0x73, 0x60, 0x6f, 0x78, 0x30, 0xcb, 0x2f, 0x47, 0x97, 0x3c, 0x2c, 0x77, 0xdb, 0x86,
	0x4e, 0x2a, 0xb2, 0xdc, 0xc4, 0x43, 0x11, 0x64, 0x5a, 0x36, 0xd3, 0xd6, 0xe2, 0x10, 0x1d, 0x10,
	0x8a, 0x88, 0x6b, 0x6b, 0x69, 0xec, 0xfd, 0xab, 0x05, 0x5b, 0xe4, 0x7f, 0x82, 0xa7, 0xfb, 0xdc,
	0xe7, 0xc0, 0x9a, 0xce, 0x74, 0x03, 0x04, 0x9a, 0x64, 0x9f, 0x02, 0xa4, 0x59, 0x7c, 0x1d, 0xcf,
	0xf8, 0x94, 0x47, 0x5a, 0xe1, 0x1a, 0xe7, 0xe1, 0xa2, 0xfa, 0x04, 0x60, 0x26, 0xa6, 0xe3, 0x50,
	0x24, 0x17, 0xf1, 0x54, 0x83, 0x5c, 0x6f, 0x26, 0xa6, 0x23, 0x62, 0x10, 0x18, 0x20, 0x7a, 0xc9,
	0x4b, 0xaa, 0x2a, 0x04, 0x03, 0x45, 0xb2, 0x1f, 0x41, 0xef, 0x92, 0x07, 0xb3, 0x10, 0xbd, 0x41,
	0x40, 0xa7, 0xb3, 0xee, 0xb6, 0x93, 0xfc, 0x6a, 0x22, 0xdb, 0x83, 0xf6, 0xa5, 0x10, 0x57, 0x4e,
	0x97, 0x16, 0x6c, 0xd2, 0x82, 0x2a, 0x78, 0x3e, 0xfd, 0x64, 0xdf, 0x83, 0x8d, 0x8c, 0x53, 0xf8,
	0xc6, 0xa9, 0x98, 0xc5, 0xe1, 0x8d, 0xd3, 0x23, 0xbd, 0xd6, 0x35, 0xf7, 0x9c, 0x98, 0x68, 0x1b,
	0xff, 0x2e, 0xcf, 0x82, 0xf1, 0xa5, 0x90, 0xb9, 0x74, 0x40, 0x05, 0x92, 0x58, 0x6f, 0x90, 0xe3,
	0xfd, 0xb5, 0x03, 0xeb, 0xa7, 0x3c, 0x9d, 0x89, 0x9b, 0xfb, 0x9c, 0xfb, 0x15, 0x00, 0x2f, 0xa3,
	0xa0, 0xf3, 0xfd, 0x23, 0x54, 0xec, 0x56, 0x6c, 0xfc, 0xda, 0xc4, 0x7b, 0x4e, 0x93, 0x3a, 0xe0,
	0xb6, 0x17, 0x20, 0x7d, 0x1b, 0x3a, 0x31, 0x16, 0x8b, 0xf6, 0xb4, 0x22, 0x30, 0x08, 0xca, 0x92,
	0x20, 0x9b, 0x4a, 0x7d, 0x9c, 0xf4, 0x88, 0x73, 0x9c, 0x4d, 0xf1, 0xd6, 0xdc, 0x0b, 0xd3, 0x62,
	0xfc, 0x87, 0x42, 0xe4, 0x01, 0xb9, 0xda, 0xf2, 0xbb, 0x61, 0x5a, 0xfc, 0x1a, 0x69, 0x84, 0x84,
	0x39, 0x9f, 0x8b, 0xec, 0x86, 0x7c, 0x6a, 0xfb, 0x9a, 0xc2, 0x9d, 0x42, 0x51, 0x24, 0x39, 0xf9,
	0xae, 0xe3, 0x2b, 0x02, 0x33, 0x93, 0x27, 0xd7, 0xda, 0x57, 0x38, 0x44, 0x4e, 0x94, 0x48, 0xa7,
	0xaf, 0x38, 0x91, 0x3a, 0x00, 0xae, 0xc5, 0xac, 0x98, 0x73, 0xe9, 0x0c, 0x54, 0xcc, 0x35, 0xc9,
	0x5e, 0xd6, 0x2e, 0xd7, 0xeb, 0x04, 0x34, 0x4f, 0xd0, 0x51, 0x0d, 0x1f, 0x9b, 0xab, 0xb6, 0x46,
	0x9c, 0x72, 0x01, 0xdb, 0x85, 0xbe, 0x1e, 0xcf, 0xb1, 0x12, 0x36, 0xc8, 0xca, 0x3a, 0xab, 0x44,
	0x89, 0xcd, 0x1a, 0x4a, 0x6c, 0x43, 0x27, 0xe2, 0x93, 0x62, 0xea, 0x0c, 0x55, 0x31, 0x12, 0x81,
	0x57, 0x4a, 0x91, 0xf2, 0xe4, 0x7d, 0x1e, 0xc5, 0x89, 0xb3, 0xa5, 0xae, 0x94, 0x25, 0x83, 0x7d,
	0x09, 0xed, 0x39, 0xcf, 0x03, 0x87, 0x91, 0x8a, 0x1f, 0xdf, 0x56, 0xf1, 0x2d, 0xcf, 0x03, 0xa5,
	0x1e, 0x4d, 0x74, 0x5f, 0xc2, 0x7a, 0x43, 0xeb, 0x47, 0x01, 0xfb, 0x73, 0xe8, 0x95, 0xf2, 0x1e,
	0x85, 0xeb, 0x13, 0x60, 0xea, 0x3e, 0xd0, 0x80, 0xcf, 0x0f, 0x3a, 0xc8, 0x31, 0x0b, 0x28, 0x95,
	0xa4, 0x63, 0xab, 0x83, 0x41, 0x51, 0xde, 0x0b, 0x58, 0x3f, 0x09, 0xc2, 0xab, 0x22, 0x35, 0xe2,
	0x17, 0x6f, 0xd8, 0xff, 0x07, 0x5d, 0x99, 0x85, 0xe3, 0x34, 0xc8, 0x2f, 0x0d, 0xb6, 0xc8, 0x2c,
	0x3c, 0x0f, 0xf2, 0x4b, 0xef, 0x25, 0xf4, 0x5f, 0x65, 0x99, 0xc8, 0x4e, 0x79, 0x1e, 0xc4, 0x15,
	0x84, 0x59, 0x94, 0x66, 0x34, 0x46, 0x65, 0xe7, 0x5c, 0x4a, 0x4c, 0x68, 0xbd, 0x58, 0x93, 0xde,
	0xdf, 0x1a, 0x67, 0xc3, 0x5b, 0xc5, 0xd5, 0xe7, 0x57, 0x5e, 0x48, 0xad, 0x81, 0xa6, 0xd0, 0xb4,
	0x34, 0x13, 0xd3, 0x8c, 0x4b, 0x69, 0x4c, 0x33, 0x34, 0x3a, 0x90, 0xa3, 0x1a, 0xba, 0xcc, 0x14,
	0xa1, 0x24, 0x65, 0x3c, 0x98, 0x9b, 0x2b, 0x9b, 0xa2, 0xd8, 0x11, 0x0c, 0x68, 0xc2, 0x38, 0x22,
	0xad, 0xf5, 0xb9, 0x41, 0x40, 0x53, 0x33, 0xc6, 0xef, 0xf3, 0x8a, 0xf0, 0xfe, 0x61, 0xc3, 0xce,
	0x28, 0xe3, 0x41, 0x5e, 0x5d, 0xc5, 0x8d, 0xc2, 0x1f, 0x16, 0x0d, 0xe5, 0x64, 0xbb, 0x74, 0xf2,
	0xb2, 0x86, 0xa4, 0x34, 0xab, 0x53, 0x37, 0x8b, 0x9a, 0xdc, 0x30, 0x44, 0x3f, 0xac, 0x52, 0x5a,
	0x1b, 0x92, 0x7d, 0xa5, 0x2e, 0xf2, 0xea, 0x9e, 0xb2, 0x47, 0x7d, 0xc9, 0x52, 0x95, 0x17, 0xda,
	0xca, 0xbb, 0xe0, 0xe1, 0xb8, 0x02, 0xf6, 0x1e, 0x89, 0x7c, 0x7a, 0x8f, 0xc8, 0x73, 0x35, 0x53,
	0x89, 0x2d, 0x4f, 0x00, 0xa6, 0xb1, 0x1c, 0x76, 0xad, 0xfd, 0x81, 0x82, 0xee, 0x0f, 0xed, 0x49,
	0xdd, 0x17, 0x30, 0xa8, 0x6f, 0xf2, 0xa8, 0x3a, 0xfa, 0x39, 0x6c, 0xf9, 0x45, 0x72, 0x9c, 0x44,
	0xbf, 0x0d, 0xe2, 0xdc, 0x04, 0xee, 0x33, 0x18, 0x94, 0xcd, 0xda, 0xb8, 0xcc, 0xf8, 0x7e, 0xc9,
	0x3b, 0xa3, 0xa8, 0x44, 0x41, 0x1e, 0x90, 0xc0, 0x81, 0x4f, 0x63, 0xef, 0xf7, 0x8d, 0x9a, 0x34,
	0xc2, 0x4a, 0xd4, 0xb6, 0xea, 0xa8, 0x5d, 0x8b, 0x55, 0xab, 0x19, 0x2b, 0x17, 0xba, 0xba, 0x0e,
	0x4c, 0x3d, 0x96, 0xb4, 0xf7, 0xbb, 0x5b, 0x6d, 0x9f, 0xd9, 0x65, 0x49, 0xf3, 0x7b, 0x87, 0xfc,
	0x5a, 0xd9, 0xd9, 0xcd, 0xb2, 0x3b, 0x41, 0xe9, 0xd4, 0x12, 0xfa, 0x5c, 0x8a, 0x22, 0x0b, 0xf9,
	0xa3, 0xa5, 0x7b, 0xdc, 0x60, 0xc6, 0x43, 0x55, 0xcb, 0xa0, 0x2d, 0xe3, 0x3f, 0x99, 0x68, 0xd2,
	0xf8, 0x8e, 0x6a, 0x65, 0xd0, 0x26, 0x84, 0xd1, 0x05, 0x80, 0x63, 0xef, 0xbb, 0x7a, 0xd8, 0x0c,
	0x3c, 0x3d, 0x5f, 0x38, 0xb1, 0x69, 0x47, 0xfd, 0x68, 0xd2, 0xf8, 0xe1, 0x2f, 0x9c, 0xec, 0x43,
	0xb0, 0x47, 0xf3, 0x48, 0xc7, 0x12, 0x87, 0x68, 0xe0, 0x6f, 0xe2, 0x39, 0x17, 0x45, 0xae, 0x6f,
	0x5d, 0x86, 0x3c, 0xfa, 0x7b, 0x17, 0xd6, 0x46, 0x22, 0xe3, 0xfe, 0xf9, 0x88, 0x7d, 0x06, 0x5d,
	0xec, 0x80, 0xe8, 0x75, 0x8a, 0x6e, 0xb9, 0xf4, 0xbe, 0xe5, 0x76, 0xf5, 0xd3, 0x94, 0xf4, 0x56,
	0xd8, 0xe7, 0xb0, 0xaa, 0xda, 0x63, 0x46, 0x6a, 0x34, 0x5a, 0x65, 0xd7, 0xbc, 0x61, 0x79, 0x2b,
	0xec, 0x00, 0x7a, 0x65, 0xdf, 0xcb, 0xa8, 0x93, 0x58, 0x6c, 0x83, 0xdd, 0x6a, 0x07, 0x25, 0x57,
	0xf5, 0xbf, 0x4a, 0x6e, 0xa3, 0x17, 0xae, 0xcb, 0xfd, 0x3e, 0xac, 0xe9, 0x0e, 0x98, 0x31, 0xad,
	0x40, 0xad, 0xf3, 0x73, 0xcb, 0x67, 0x1b, 0x52, 0x01, 0xaa, 0x16, 0x93, 0x7d, 0x54, 0xe9, 0x50,
	0x5f, 0xd0, 0x14, 0xad, 0xfb, 0x48, 0x25, 0xba, 0xd9, 0x54, 0x36, 0x44, 0x7f, 0x49, 0xdd, 0x3a,
	0x12, 0x27, 0x37, 0xef, 0xe8, 0x4e, 0xff, 0xc0, 0x82, 0x1f, 0xc2, 0x40, 0x7b, 0x56, 0xbd, 0x36,
	0x91, 0x47, 0x16, 0xbb, 0x4d, 0xe5, 0x11, 0xe2, 0x78, 0x2b, 0xec, 0x10, 0x06, 0xaf, 0x79, 0x5e,
	0x3d, 0x07, 0x6d, 0x36, 0x9e, 0x5f, 0xce, 0x4e, 0xdd, 0xe6, 0x7b, 0x8c, 0xb7, 0xc2, 0x9e, 0x91,
	0x56, 0xb5, 0x57, 0x9c, 0xe1, 0xc2, 0x12, 0xe9, 0x6e, 0x34, 0x38, 0xb2, 0xd2, 0xac, 0x7c, 0x33,
	0x5c, 0xe2, 0xfe, 0x41, 0xed, 0xd1, 0x50, 0x2d, 0x19, 0xbe, 0x57, 0xa6, 0x56, 0xaf, 0x61, 0xe5,
	0x4b, 0x5e, 0xc9, 0x6a, 0xd8, 0xff, 0x2d, 0x40, 0x75, 0x00, 0xaa, 0x58, 0xdc, 0x6a, 0x96, 0xdc,
	0x05, 0xb6, 0xae, 0x38, 0x6f, 0xe5, 0xd0, 0x62, 0x27, 0xb0, 0xb9, 0x00, 0xc7, 0xec, 0x76, 0x19,
	0xb8, 0xee, 0xdd, 0xb0, 0x7d, 0x68, 0xa1, 0x0e, 0x55, 0x8d, 0xe9, 0x7c, 0x58, 0xac, 0x39, 0x77,
	0x81, 0xad, 0x57, 0xef, 0x5b, 0x87, 0x16, 0xfb, 0x05, 0x6c, 0x2e, 0x80, 0x15, 0x73, 0xab, 0xa4,
	0x5a, 0x7c, 0xb8, 0x72, 0x97, 0xfd, 0xab, 0x94, 0x19, 0xa1, 0xb0, 0x06, 0x36, 0xa9, 0x1c, 0x6a,
	0xbe, 0x61, 0x19, 0x21, 0xcb, 0x40, 0xec, 0xd0, 0x62, 0x3f, 0x81, 0x7e, 0x0d, 0xa0, 0xd9, 0x4e,
	0xb5, 0x63, 0xc3, 0xaf, 0x8b, 0xfc, 0x4a, 0xc0, 0x21, 0xac, 0x2a, 0x74, 0x53, 0xde, 0x6c, 0xdc,
	0x8e, 0xdc, 0x1a, 0xab, 0x0c, 0xc5, 0x64, 0x95, 0xde, 0xbf, 0x9f, 0xfd, 0x37, 0x00, 0x00, 0xff,
	0xff, 0xd3, 0x3d, 0x55, 0x99, 0x0d, 0x17, 0x00, 0x00,
}
